{
    "generator": "Code Snippets v3.6.5",
    "date_created": "2024-10-22 13:33",
    "snippets": [
        {
            "id": 1,
            "name": "UPLOAD FILENAMES",
            "desc": "\n<p>This code converts the file name to lowercase in WordPress.<\/p>",
            "code": "add_filter( 'sanitize_file_name', 'mb_strtolower' );",
            "tags": [
                "media",
                "function"
            ],
            "active": true,
            "modified": "2024-10-20 20:48:40",
            "revision": "4"
        },
        {
            "id": 3,
            "name": "ACTIVATE SMILEYS",
            "desc": "\n<p>This code applies the 'convert_smilies' function to various WordPress filters to convert text smilies to image smilies.<\/p>",
            "code": "add_filter( 'widget_text', 'convert_smilies' );\nadd_filter( 'the_title', 'convert_smilies' );\nadd_filter( 'wp_title', 'convert_smilies' );\nadd_filter( 'get_bloginfo', 'convert_smilies' );",
            "tags": [
                "function"
            ],
            "active": true,
            "modified": "2024-10-20 20:48:16",
            "revision": "4"
        },
       
        {
            "id": 11,
            "name": "CPT DUPLICATOR",
            "desc": "Snippet to add functionality to duplicate posts and pages. This was inspired by the post duplication snippet found on codesnippets.cloud (see link)",
            "code": "\/**\n * Duplicate WordPress Posts, Pages, and Custom Post Types as Drafts\n *\n * This code snippet enables the duplication of WordPress posts, pages, and all registered custom post types (CPTs).\n * It adds a 'Duplicate' link to the row actions for each item in the admin dashboard. When clicked, this link\n * triggers the duplication of the selected item, creating a new draft with the same content, custom fields,\n * and taxonomies.\n *\n * Functions:\n * 1. `duplicate_post_as_draft`: Handles the duplication process. It copies the post data, including title,\n *    content, excerpt, and custom fields, and creates a new post with a 'draft' status. It also maintains\n *    the taxonomy terms (like categories and tags) from the original post.\n * 2. `duplicate_post_link`: Adds the 'Duplicate' action link to the WordPress admin interface for each post,\n *    page, and custom post type. This link uses WordPress's built-in nonce functionality for security.\n * 3. `apply_duplicate_post_link_to_cpts`: Dynamically applies the duplicate post link function to all public\n *    post types, ensuring the 'Duplicate' link appears for any custom post types registered on the site.\n *\n * Author: Mark Harris\n * URI: https:\/\/www.christchurchwebsolutions.co.uk\n *\/\n \nfunction duplicate_post_as_draft() {\n    global $wpdb;\n \n    \/\/ Verify the nonce for security\n    $nonce_action = 'duplicate_post_as_draft';\n    $nonce_name = 'duplicate_nonce';\n    if (!isset($_GET[$nonce_name]) || !wp_verify_nonce($_GET[$nonce_name], $nonce_action)) {\n        wp_die(esc_html__('Security check failed.', 'wpturbo'));\n    }\n \n    \/\/ Check if the 'post' parameter is set in either GET or POST request\n    $post_id = filter_input(INPUT_GET, 'post', FILTER_SANITIZE_NUMBER_INT) ?: filter_input(INPUT_POST, 'post', FILTER_SANITIZE_NUMBER_INT);\n \n    if (!$post_id) {\n        wp_die(esc_html__('No post to duplicate has been supplied!', 'wpturbo'));\n    }\n \n    \/\/ Check if the post exists\n    $post = get_post($post_id);\n    if (!$post) {\n        wp_die(esc_html(sprintf(__('Post creation failed, could not find original post: %s', 'wpturbo'), $post_id)));\n    }\n \n    $current_user = wp_get_current_user();\n    $new_post_author = $current_user->ID;\n \n    $args = [\n        \"comment_status\" => $post->comment_status,\n        \"ping_status\" => $post->ping_status,\n        \"post_author\" => $new_post_author,\n        \"post_content\" => $post->post_content,\n        \"post_excerpt\" => $post->post_excerpt,\n        \"post_name\" => $post->post_name,\n        \"post_parent\" => $post->post_parent,\n        \"post_password\" => $post->post_password,\n        \"post_status\" => \"draft\",\n        \"post_title\" => $post->post_title . \" (Copy)\",\n        \"post_type\" => $post->post_type,\n        \"to_ping\" => $post->to_ping,\n        \"menu_order\" => $post->menu_order\n    ];\n \n    $new_post_id = wp_insert_post($args);\n \n    $taxonomies = get_object_taxonomies($post->post_type);\n    foreach ($taxonomies as $taxonomy) {\n        $post_terms = wp_get_object_terms($post_id, $taxonomy, [\"fields\" => \"slugs\"]);\n        wp_set_object_terms($new_post_id, $post_terms, $taxonomy, false);\n    }\n \n    $post_meta_infos = $wpdb->get_results(\n        $wpdb->prepare(\"SELECT meta_key, meta_value FROM $wpdb->postmeta WHERE post_id = %d\", $post_id)\n    );\n    if (count($post_meta_infos) != 0) {\n        foreach ($post_meta_infos as $meta_info) {\n            $meta_key = $meta_info->meta_key;\n            $meta_value = sanitize_meta($meta_info->meta_key, $meta_info->meta_value, \"post\");\n            $wpdb->insert($wpdb->postmeta, [\n                \"post_id\" => $new_post_id,\n                \"meta_key\" => $meta_key,\n                \"meta_value\" => $meta_value\n            ]);\n        }\n    }\n \n    \/\/ Redirect to the post list screen and show a success message\n    $redirect_url = admin_url(\"edit.php?post_type=\" . $post->post_type);\n    wp_redirect(add_query_arg(\"message\", \"101\", $redirect_url));\n    exit();\n}\n \nadd_action(\"admin_action_duplicate_post_as_draft\", \"duplicate_post_as_draft\");\n \nfunction duplicate_post_link($actions, $post) {\n    if (current_user_can('edit_posts')) {\n        $actions['duplicate'] = '<a href=\"' .\n            wp_nonce_url(\n                admin_url(\"admin.php?action=duplicate_post_as_draft&post=\" . $post->ID),\n                'duplicate_post_as_draft',\n                'duplicate_nonce'\n            ) .\n            '\" title=\"' . esc_attr__('Duplicate this item', 'wpturbo') .\n            '\" rel=\"permalink\">' . esc_html__('Duplicate', 'wpturbo') . '<\/a>';\n    }\n    return $actions;\n}\n \nadd_filter(\"post_row_actions\", \"duplicate_post_link\", 10, 2);\nadd_filter(\"page_row_actions\", \"duplicate_post_link\", 10, 2);\n \nfunction apply_duplicate_post_link_to_cpts() {\n    $post_types = get_post_types([\"public\" => true], \"names\");\n    foreach ($post_types as $post_type) {\n        add_filter(\"{$post_type}_row_actions\", \"duplicate_post_link\", 10, 2);\n    }\n}\n \nadd_action(\"admin_init\", \"apply_duplicate_post_link_to_cpts\");\n \nfunction show_duplicate_admin_notice() {\n    if (isset($_GET['message']) && $_GET['message'] === '101') {\n        echo '<div class=\"notice notice-success is-dismissible\"><p>' . esc_html('Post duplicated successfully.') . '<\/p><\/div>';\n    }\n}\n \nadd_action('admin_notices', 'show_duplicate_admin_notice');",
            "tags": [
                "post-actions"
            ],
            "active": true,
            "modified": "2024-10-20 20:52:04",
            "revision": "9"
        },
        {
            "id": 12,
            "name": "DISABLE EMAIL NOTIFY FOR SUCCESSFUL AUTO UPDATES",
            "desc": "Disables email notifications for automatic updates of themes and plugins. Also disables email notifications for successful core updates.\nSource: https:\/\/webberzone.com\/disable-wordpress-auto-update-emails\/#method-1-disable-autoupdate-emails-using-code",
            "code": "\/\/ Disable auto-update emails for WordPress core updates.\nadd_filter( 'auto_core_update_send_email', 'wz_stop_core_update_emails', 10, 4 );\n\nfunction wz_stop_core_update_emails( $send, $type, $core_update, $result ) {\n    if ( ! empty( $type ) && 'success' === $type ) {\n        return false;\n    }\n\n    return true;\n}\n\n\/\/ Disable auto-update emails for WordPress themes and plugins.\nadd_filter( 'auto_theme_update_send_email', '__return_false' );\nadd_filter( 'auto_plugin_update_send_email', '__return_false' );",
            "tags": [
                "update"
            ],
            "active": true,
            "modified": "2024-10-20 20:53:00",
            "revision": "7"
        },
        {
            "id": 13,
            "name": "CHANGE RECIPIENT OF WP FATAL ERROR MAIL",
            "desc": "\n<p>This code changes the email address that WordPress sends recovery mode emails to.<\/p>",
            "code": "add_filter( 'recovery_mode_email', 'send_sumun_the_recovery_mode_email', 10, 2 );\nfunction send_sumun_the_recovery_mode_email( $email, $url ) {\n$email['to'] = 'info@bueroblanko.de';  \/\/ Your own email\nreturn $email;\n}",
            "tags": [
                "email"
            ],
            "active": true,
            "modified": "2024-10-20 21:00:29",
            "revision": "9"
        },
        {
            "id": 15,
            "name": "NO COMMENT MODERATION EMAILS",
            "desc": "\n<p>This code customizes WordPress to remove the admin email from the list of recipients for comment moderation notifications.<\/p>",
            "code": "add_filter( 'comment_moderation_recipients', function ( $emails, $cid ) {\n\tif ( ( $key = array_search( get_bloginfo( 'admin_email' ), $emails) ) !== false ) {\n\t\tunset( $emails[ $key ] );\n\t}\n\treturn $emails;\n}, 10, 2 );",
            "tags": [
                "comments",
                "email"
            ],
            "active": true,
            "modified": "2024-10-20 21:00:45",
            "revision": "7"
        },
        {
            "id": 21,
            "name": "REGENERATE THUMBNAILS",
            "desc": "Created new image sizes?  Changed themes?  This code snippet will force WordPress to regenerate thumbnails without the need for any 3rd party plugin.",
            "code": "function regenerateThumbnails()\n{\n    global $wpdb;\n    \n    $images = $wpdb->get_results(\"SELECT ID FROM $wpdb->posts WHERE post_type = 'attachment' AND post_mime_type LIKE 'image\/%'\");\n \n    foreach ($images as $image)\n    {\n        $id = $image->ID;\n        $fullsizepath = get_attached_file($id);\n \n        if (false === $fullsizepath || !file_exists($fullsizepath))\n            return;\n \n        require_once(ABSPATH . 'wp-admin\/includes\/image.php');\n \n        if (wp_update_attachment_metadata($id, wp_generate_attachment_metadata($id, $fullsizepath)))\n            return true;\n        else\n            return false;\n    }\n}",
            "active": true,
            "modified": "2024-10-20 20:53:45",
            "revision": "5"
        },
        {
            "id": 23,
            "name": "REPLACE \"HOWDY\"",
            "desc": "\n<p>The code replaces the 'Howdy' greeting in the WordPress dashboard with 'Welcome Back'.<\/p>",
            "code": "\/\/REPLACE HOWDY IN DASHBOARD\n            \nfunction replace_howdy( $wp_admin_bar ) {\n    $my_account=$wp_admin_bar->get_node('my-account');\n    $newtitle = str_replace( 'Howdy,', 'Welcome Back', $my_account->title );\n    $wp_admin_bar->add_node( array(\n        'id' => 'my-account',\n        'title' => $newtitle,\n    ) );\n}\nadd_filter( 'admin_bar_menu', 'replace_howdy',25 );",
            "tags": [
                "dashboard-customization"
            ],
            "active": true,
            "modified": "2024-10-20 21:00:00",
            "revision": "9"
        },
        {
            "id": 28,
            "name": "DISABLE AUTOMATIC UPDATES EMAILS",
            "desc": "Stop getting automatic updates",
            "code": "\/\/ Disable auto-update emails.\nadd_filter( 'auto_core_update_send_email', '__return_false' );\n\n\/\/ Disable auto-update emails for plugins.\nadd_filter( 'auto_plugin_update_send_email', '__return_false' );\n\n\/\/ Disable auto-update emails for themes.\nadd_filter( 'auto_theme_update_send_email', '__return_false' );",
            "tags": [
                "email",
                "function"
            ],
            "active": true,
            "modified": "2024-10-20 20:53:29",
            "revision": "5"
        },
        {
            "id": 29,
            "name": "DISABLE COMMENTS",
            "desc": "\n<p>The code disables all comment-related functionalities in WordPress.<\/p>",
            "code": "\/\/ Disable support for comments and trackbacks in post types\nfunction df_disable_comments_post_types_support() {\n\t$post_types = get_post_types();\n\tforeach ($post_types as $post_type) {\n\t\tif(post_type_supports($post_type, 'comments')) {\n\t\t\tremove_post_type_support($post_type, 'comments');\n\t\t\tremove_post_type_support($post_type, 'trackbacks');\n\t\t}\n\t}\n}\nadd_action('admin_init', 'df_disable_comments_post_types_support');\n\/\/ Close comments on the front-end\nfunction df_disable_comments_status() {\n\treturn false;\n}\nadd_filter('comments_open', 'df_disable_comments_status', 20, 2);\nadd_filter('pings_open', 'df_disable_comments_status', 20, 2);\n\/\/ Hide existing comments\nfunction df_disable_comments_hide_existing_comments($comments) {\n\t$comments = array();\n\treturn $comments;\n}\nadd_filter('comments_array', 'df_disable_comments_hide_existing_comments', 10, 2);\n\/\/ Remove comments page in menu\nfunction df_disable_comments_admin_menu() {\n\tremove_menu_page('edit-comments.php');\n}\nadd_action('admin_menu', 'df_disable_comments_admin_menu');\n\/\/ Redirect any user trying to access comments page\nfunction df_disable_comments_admin_menu_redirect() {\n\tglobal $pagenow;\n\tif ($pagenow === 'edit-comments.php') {\n\t\twp_redirect(admin_url()); exit;\n\t}\n}\nadd_action('admin_init', 'df_disable_comments_admin_menu_redirect');\n\/\/ Remove comments metabox from dashboard\nfunction df_disable_comments_dashboard() {\n\tremove_meta_box('dashboard_recent_comments', 'dashboard', 'normal');\n}\nadd_action('admin_init', 'df_disable_comments_dashboard');\n\/\/ Remove comments links from admin bar\nfunction df_disable_comments_admin_bar() {\n\tif (is_admin_bar_showing()) {\n\t\tremove_action('admin_bar_menu', 'wp_admin_bar_comments_menu', 60);\n\t}\n}\nadd_action('init', 'df_disable_comments_admin_bar');\n\n\nfunction remove_comments(){\n        global $wp_admin_bar;\n        $wp_admin_bar->remove_menu('comments');\n}\nadd_action( 'wp_before_admin_bar_render', 'remove_comments' );",
            "tags": [
                "comments",
                "custom"
            ],
            "active": true,
            "modified": "2024-10-20 20:49:53",
            "revision": "7"
        },
        {
            "id": 31,
            "name": "CHANGE DASHBOARD HEADER TITLE",
            "desc": "\n<p>This code modifies the title of the WordPress Dashboard to 'Ihre Website \u00dcbersicht'.<\/p>",
            "code": "\/\/CHANGE DASHBOARD HEADER TITLE\n\n    function my_custom_dashboard_name(){\n        if ( $GLOBALS['title'] != 'Dashboard' ){\n            return;\n        }\n\n        $GLOBALS['title'] =  __( 'Ihre Website \u00dcbersicht' ); \n    }\n\n    add_action( 'admin_head', 'my_custom_dashboard_name' );",
            "tags": [
                "dashboard",
                "branding"
            ],
            "active": true,
            "modified": "2024-10-20 20:43:11",
            "revision": "9"
        },
        {
            "id": 33,
            "name": "CHANGE DASHBOARD FOOTER LINK",
            "desc": "\n<p>The code changes the default WordPress admin dashboard footer link and text, and allows unfiltered uploads.<\/p>",
            "code": "\/\/CHANGE DASHBOARD FOOTER LINK\n \nfunction remove_footer_admin () \n{\n    echo '<span id=\"footer-thankyou\">Developed by <a href=\"https:\/\/www.bueroblanko.de\" target=\"_blank\">B\u00dcRO BLANKO<\/a><\/span>';\n}\nadd_filter('admin_footer_text', 'remove_footer_admin');\n\ndefine('ALLOW_UNFILTERED_UPLOADS', true);",
            "tags": [
                "dashboard",
                "branding"
            ],
            "active": true,
            "modified": "2024-10-20 20:43:56",
            "revision": "5"
        },
        {
            "id": 34,
            "name": "HIDE SITE HEALTH",
            "desc": "\n<p>This code hides the Site Health feature in the WordPress admin panel.<\/p>",
            "code": "\/\/ HIDE SITE HEALTH\n\nremove_filter( 'user_has_cap', 'wp_maybe_grant_site_health_caps', 1, 4 );\n\n\n\/\/ Remove Tools Submenu Item for Site Health.\nadd_action( 'admin_menu', function () {\n\tremove_submenu_page( 'tools.php', 'site-health.php' );\n} );\n\/\/ Prevent direct access to the Site Health page.\nadd_action( 'current_screen', function () {\n\t$screen = get_current_screen();\n\tif ( 'site-health' === $screen->id ) {\n\t\twp_safe_redirect( admin_url() );\n\t\texit;\n\t}\n} );\n\n\/\/ Disable the Site Health Dashboard Widget.\nadd_action( 'wp_dashboard_setup', function () {\n\tglobal $wp_meta_boxes;\n\tif ( isset( $wp_meta_boxes['dashboard']['normal']['core']['dashboard_site_health'] ) ) {\n\t\tunset( $wp_meta_boxes['dashboard']['normal']['core']['dashboard_site_health'] );\n\t}\n} );",
            "tags": [
                "site-health"
            ],
            "active": true,
            "modified": "2024-10-20 20:45:33",
            "revision": "7"
        },
        {
            "id": 35,
            "name": "DASHBOARD TEXT",
            "desc": "\n<p>This code adds a custom text widget to the WordPress admin dashboard.<\/p>",
            "code": "\/\/ADD TEXT WIDGET TO ADMIN DASHBOARD\n\nadd_action('wp_dashboard_setup', 'my_custom_dashboard_widgets');\nfunction my_custom_dashboard_widgets() {\nwp_add_dashboard_widget('custom_help_widget', 'Ansprechpartner bei Fragen', 'custom_dashboard_help');\n}\n\nfunction custom_dashboard_help() {\necho '  <img src=\"\/wp-content\/uploads\/2024\/10\/bb-template-logo.svg\" alt=\"Philipp Ludwig\" style=\"max-width: 50px; border-radius: 100%; height: auto; margin-bottom: 20px;\"><\/br><p><span style=\"color: black;font-size: 14px;\"><strong>&copy; B\u00fcro Blanko Medien GmbH<\/strong><\/span><br>Telefon: <a style=\"text-decoration:none;color:#000;\" href=\"tel:062144575895\">+49 621 445 758 95<\/a><br><a href=\"https:\/\/www.bueroblanko.de\">www.bueroblanko.de<\/a> | <a href=\"mailto:info@bueroblanko.de\">info@bueroblanko.de<\/a><\/p>';\n}",
            "tags": [
                "branding",
                "dashboard"
            ],
            "active": true,
            "modified": "2024-10-20 21:19:08",
            "revision": "25"
        },
        {
            "id": 36,
            "name": "REMOVE DASHBOARD WIDGETS",
            "desc": "\n<p>The code removes various widgets from the WordPress dashboard.<\/p>",
            "code": "\/\/REMOVE DASHBOARD WIDGETS\n\nfunction remove_dashboard_widgets () {\n\n\n  remove_meta_box('dashboard_quick_press','dashboard','side'); \/\/Quick Press widget\n  remove_meta_box('dashboard_recent_drafts','dashboard','side'); \/\/Recent Drafts\n  remove_meta_box('dashboard_primary','dashboard','side'); \/\/WordPress.com Blog\n  remove_meta_box('dashboard_secondary','dashboard','side'); \/\/Other WordPress News\n  remove_meta_box('dashboard_incoming_links','dashboard','normal'); \/\/Incoming Links\n  remove_meta_box('dashboard_plugins','dashboard','normal'); \/\/Plugins\n  remove_meta_box('dashboard_right_now','dashboard', 'normal'); \/\/Right Now\n  remove_meta_box('rg_forms_dashboard','dashboard','normal'); \/\/Gravity Forms\n  remove_meta_box('dashboard_recent_comments','dashboard','normal'); \/\/Recent Comments\n  remove_meta_box('icl_dashboard_widget','dashboard','normal'); \/\/Multi Language Plugin\n  remove_meta_box('dashboard_activity','dashboard', 'normal'); \/\/Activity\n  remove_action('welcome_panel','wp_welcome_panel');\n\n}\n\nadd_action('wp_dashboard_setup', 'remove_dashboard_widgets');\n",
            "tags": [
                "dashboard",
                "widgets"
            ],
            "active": true,
            "modified": "2024-10-20 20:46:16",
            "revision": "5"
        },
        {
            "id": 37,
            "name": "PERFORMANCE",
            "desc": "\n<p>The code removes enqueue styles and scripts from WordPress and WooCommerce on certain conditions to optimize page loading speed.<\/p>",
            "code": "\/\/Remove Gutenberg Block Library CSS from loading on the frontend\n \nfunction smartwp_remove_wp_block_library_css(){\n \n    wp_dequeue_style( 'wp-block-library' );\n \n    wp_dequeue_style( 'wp-block-library-theme' );\n \n    wp_dequeue_style( 'wc-blocks-style' ); \/\/ Remove WooCommerce block CSS\n \n}\n \nadd_action( 'wp_enqueue_scripts', 'smartwp_remove_wp_block_library_css', 100 );\n\n\/\/This has been syncronised 123\/\/\nfunction wp_remove_scripts() {\n\/\/ check if user is admina\n    if (current_user_can( 'update_core' )) {\n            return;\n        }\n    else {\n    \/\/ Check for the page you want to target\n    if ( is_page( 'homepage' ) ) {\n        \/\/ Remove Scripts\n        wp_dequeue_style( 'jquery-ui-core' );\n        }\n    }\n}\nadd_action( 'wp_enqueue_scripts', 'wp_remove_scripts', 99 );\n\n\nif (!function_exists( 'evolution_manage_woocommerce_styles' ) ) :\n\/**\n* Optimize WooCommerce Scripts\n* Removes WooCommerce styles and scripts from non WooCommerce pages.\n*\/\nfunction evolution_manage_woocommerce_styles() {\n \n    \/\/first check that woo exists to prevent fatal errors\n    if ( function_exists( 'is_woocommerce' ) ) {\n \n        \/\/dequeue scripts and styles\n        if ( ! is_woocommerce() && ! is_cart() && ! is_checkout() && ! is_account_page() ) {\n            wp_dequeue_style( 'woocommerce-layout' );\n            wp_dequeue_style( 'woocommerce-smallscreen' );\n            wp_dequeue_style( 'woocommerce-general' );\n            wp_dequeue_style( 'evolution-woostyles' );\n            wp_dequeue_script( 'wc_price_slider' );\n            wp_dequeue_script( 'wc-single-product' );\n            wp_dequeue_script( 'wc-add-to-cart' );\n            wp_dequeue_script( 'wc-cart-fragments' );\n            wp_dequeue_script( 'wc-checkout' );\n            wp_dequeue_script( 'wc-add-to-cart-variation' );\n            wp_dequeue_script( 'wc-single-product' );\n            wp_dequeue_script( 'wc-cart' );\n            wp_dequeue_script( 'wc-chosen' );\n            wp_dequeue_script( 'woocommerce' );\n            wp_dequeue_script( 'prettyPhoto' );\n            wp_dequeue_script( 'prettyPhoto-init' );\n            wp_dequeue_script( 'jquery-blockui' );\n            wp_dequeue_script( 'jquery-placeholder' );\n            wp_dequeue_script( 'fancybox' );\n            wp_dequeue_script( 'jqueryui' );\n        }\n    }\n}\nadd_action( 'wp_enqueue_scripts', 'evolution_manage_woocommerce_styles', 99 );\nendif;",
            "tags": [
                "performance",
                "custom"
            ],
            "active": true,
            "modified": "2024-10-20 20:46:55",
            "revision": "5"
        },
        {
            "id": 38,
            "name": "CONVERT IMAGES TO WEBP",
            "desc": "\n<p>The code automatically converts uploaded images (JPEG, PNG, GIF) to WebP format in WordPress.<\/p>",
            "code": "\/**\n * Convert Uploaded Images to WebP Format\n *\n * This snippet converts uploaded images (JPEG, PNG, GIF) to WebP format\n * automatically in WordPress. Ideal for use in a theme's functions.php file,\n * or with plugins like Code Snippets or WPCodeBox.\n *\n * @package    WordPress_Custom_Functions\n * @autor      Mark Harris\n * @link       www.christchurchwebsolutions.co.uk\n *\n * Usage Instructions:\n * - Add this snippet to your theme's functions.php file, or add it as a new\n *   snippet in Code Snippets or WPCodeBox.\n * - The snippet hooks into WordPress's image upload process and converts\n *   uploaded images to the WebP format.\n *\n * Optional Configuration:\n * - By default, the original image file is deleted after conversion to WebP.\n *   If you prefer to keep the original image file, simply comment out or remove\n *   the line '@unlink( $file_path );' in the wpturbo_handle_upload_convert_to_webp function.\n *   This will preserve the original uploaded image file alongside the WebP version.\n *\/\n \nadd_filter('wp_handle_upload', 'wpturbo_handle_upload_convert_to_webp');\n \nfunction wpturbo_handle_upload_convert_to_webp($upload) {\n    if ($upload['type'] == 'image\/jpeg' || $upload['type'] == 'image\/png' || $upload['type'] == 'image\/gif') {\n        $file_path = $upload['file'];\n \n        \/\/ Check if ImageMagick or GD is available\n        if (extension_loaded('imagick') || extension_loaded('gd')) {\n            $image_editor = wp_get_image_editor($file_path);\n            if (!is_wp_error($image_editor)) {\n                $file_info = pathinfo($file_path);\n                $dirname   = $file_info['dirname'];\n                $filename  = $file_info['filename'];\n \n                \/\/ Create a unique file path for the WebP image\n                $def_filename = wp_unique_filename($dirname, $filename . '.webp');\n                $new_file_path = $dirname . '\/' . $def_filename;\n \n                \/\/ Attempt to save the image in WebP format\n                $saved_image = $image_editor->save($new_file_path, 'image\/webp');\n                if (!is_wp_error($saved_image) && file_exists($saved_image['path'])) {\n                    \/\/ Success: replace the uploaded image with the WebP image\n                    $upload['file'] = $saved_image['path'];\n                    $upload['url']  = str_replace(basename($upload['url']), basename($saved_image['path']), $upload['url']);\n                    $upload['type'] = 'image\/webp';\n \n                    \/\/ Optionally remove the original image\n                    @unlink($file_path);\n                }\n            }\n        }\n    }\n \n    return $upload;\n}",
            "tags": [
                "image-conversion"
            ],
            "active": true,
            "modified": "2024-10-20 21:20:25",
            "revision": "3"
        },
        {
            "id": 40,
            "name": "STYLE ADMIN-BAR",
            "desc": "\n<p>The code customizes the WordPress admin dashboard logo, adds a 'Support' link to the admin bar, and changes the admin bar's color.<\/p>",
            "code": "function dashboard_logo() {\n    echo '\n        <style type=\"text\/css\">\n#wpadminbar #wp-admin-bar-wp-logo>.ab-item {\n    padding: 0 7px;\n    background-image: url(https:\/\/dev.bueroblanko.de\/wp-content\/uploads\/2024\/10\/logo-bildmarke-weiss-freiraum.webp) !important;\n    background-size: 70%;\n    background-position: center;\n    background-repeat: no-repeat;\n    opacity: 0.8;\n}\n#wpadminbar #wp-admin-bar-wp-logo>.ab-item .ab-icon:before {\n    content: \" \";\n    top: 2px;\n}\n\n#wpadminbar #wp-admin-bar-site-name>.ab-item:before {\n    display: none;\n}\n\n#wp-admin-bar-et-use-visual-builder a:before {\n    color: #fff !important;\n}\n\n#wp-admin-bar-about, #wp-admin-bar-contribute, #wp-admin-bar-wp-logo ul {display:none!important;}\n\n#wpadminbar .quicklinks .ab-sub-wrapper .menupop.hover>a, #wpadminbar .quicklinks .menupop ul li a:focus, #wpadminbar .quicklinks .menupop ul li a:focus strong, #wpadminbar .quicklinks .menupop ul li a:hover, #wpadminbar .quicklinks .menupop ul li a:hover strong, #wpadminbar .quicklinks .menupop.hover ul li a:focus, #wpadminbar .quicklinks .menupop.hover ul li a:hover, #wpadminbar .quicklinks .menupop.hover ul li div[tabindex]:focus, #wpadminbar .quicklinks .menupop.hover ul li div[tabindex]:hover, #wpadminbar li #adminbarsearch.adminbar-focused:before, #wpadminbar li .ab-item:focus .ab-icon:before, #wpadminbar li .ab-item:focus:before, #wpadminbar li a:focus .ab-icon:before, #wpadminbar li.hover .ab-icon:before, #wpadminbar li.hover .ab-item:before, #wpadminbar li:hover #adminbarsearch:before, #wpadminbar li:hover .ab-icon:before, #wpadminbar li:hover .ab-item:before, #wpadminbar.nojs .quicklinks .menupop:hover ul li a:focus, #wpadminbar.nojs .quicklinks .menupop:hover ul li a:hover {\n    color: #fff;\n}\n\n#wpadminbar .ab-top-menu>li.hover>.ab-item, #wpadminbar.nojq .quicklinks .ab-top-menu>li>.ab-item:focus, #wpadminbar:not(.mobile) .ab-top-menu>li:hover>.ab-item, #wpadminbar:not(.mobile) .ab-top-menu>li>.ab-item:focus {\n    color: #fff;\n}\n        <\/style>\n    ';\n}\nadd_action('wp_before_admin_bar_render', 'dashboard_logo');\n\n\n\n\/\/ customize admin bar css\nfunction override_admin_bar_css() { \n\n   if ( is_admin_bar_showing() ) { ?>\n\n\n      <style type=\"text\/css\">\n#wpadminbar {\n    background: #000 !important;\n}\n      <\/style>\n\n   <?php }\n\n}\n\n\/\/ on backend area\nadd_action( 'admin_head', 'override_admin_bar_css' );\n\n\/\/ on frontend area\nadd_action( 'wp_head', 'override_admin_bar_css' );\t",
            "tags": [
                "admin-bar",
                "branding"
            ],
            "active": true,
            "modified": "2024-10-20 22:56:27",
            "revision": "43"
        },
        {
            "id": 41,
            "name": "CHANGE COLOR SCHEME",
            "desc": "\n<p>This code adds a new color scheme to the WordPress admin area.<\/p>",
            "code": "\/\/ 1. Farb-Schema erstellen\nfunction wpacg_bb_admin_color_scheme() {\n    \/\/ Setze den absoluten Link zur CSS-Datei\n    $css_url = '\/wp-content\/uploads\/bb.css'; \/\/ \u00c4ndere dies entsprechend\n\n    \/\/ BB\n    wp_admin_css_color('bb', __('BB'), $css_url, array('#1c1c1c', '#fff', '#7535e0', '#000000'));\n}\nadd_action('admin_init', 'wpacg_bb_admin_color_scheme');\n\nadd_filter( 'get_user_option_admin_color', function($result) { return 'bb'; }, 99); add_action( 'user_register', function($user_id) { wp_update_user( array ('ID' => $user_id, 'admin_color' => 'bb') ); }, 10, 1);",
            "active": true,
            "modified": "2024-10-20 22:49:22",
            "revision": "29"
        },
        {
            "id": 46,
            "name": "REDIRECT ABOUT.PHP",
            "desc": "\n<p>This code redirects the user from the about.php page to the WordPress dashboard.<\/p>",
            "code": "function redirect_about_page_to_dashboard() {\n    \/\/ \u00dcberpr\u00fcfen, ob der aktuelle Benutzer auf die about.php-Seite zugreift\n    if (strpos($_SERVER['REQUEST_URI'], 'about.php') !== false) {\n        \/\/ Die URL des WordPress-Dashboards\n        $dashboard_url = admin_url(); \/\/ Dies gibt die URL des Dashboards zur\u00fcck\n        \n        \/\/ F\u00fchre die Umleitung durch\n        wp_redirect($dashboard_url);\n        exit; \/\/ Stelle sicher, dass das Skript nach der Umleitung beendet wird\n    }\n}\nadd_action('admin_init', 'redirect_about_page_to_dashboard');\n",
            "tags": [
                "admin-bar",
                "function"
            ],
            "scope": "admin",
            "active": true,
            "modified": "2024-10-20 22:51:26",
            "revision": "7"
        },
        {
            "id": 48,
            "name": "ALLOW SVG",
            "desc": "Allow SVG upload without a plugin",
            "code": "\/\/* allow SVG\n\tfunction def_allow_svgimg_types($mimes) {\n\t  $mimes['svg'] = 'image\/svg+xml';\n\t  return $mimes;\n\t}\n\tadd_filter('upload_mimes', 'def_allow_svgimg_types');\n\tadd_filter( 'wp_check_filetype_and_ext', function($def_svg_filetype_ext_data, $file, $filename, $mimes) {\n\t\tif ( substr($filename, -4) === '.svg' ) {\n\t\t\t$def_svg_filetype_ext_data['ext'] = 'svg';\n\t\t\t$def_svg_filetype_ext_data['type'] = 'image\/svg+xml';\n\t\t}\n\t\treturn $def_svg_filetype_ext_data;\n\t}, 100, 4 );\n\tfunction def_common_svg_media_thumbnails($response, $attachment, $meta){\n\t\tif($response['type'] === 'image' && $response['subtype'] === 'svg+xml' && class_exists('SimpleXMLElement'))\n\t\t{\n\t\t  try {\n\t\t      $path = get_attached_file($attachment->ID);\n\t\t      if(@file_exists($path))\n\t\t      {\n\t\t          $svg = new SimpleXMLElement(@file_get_contents($path));\n\t\t          $src = $response['url'];\n\t\t          $width = (int) $svg['width'];\n\t\t          $height = (int) $svg['height'];\n\t\t          \/\/media gallery\n\t\t          $response['image'] = compact( 'src', 'width', 'height' );\n\t\t          $response['thumb'] = compact( 'src', 'width', 'height' );\n\t\t          \/\/media single\n\t\t          $response['sizes']['full'] = array(\n\t\t              'height'        => $height,\n\t\t              'width'         => $width,\n\t\t              'url'           => $src,\n\t\t              'orientation'   => $height > $width ? 'portrait' : 'landscape',\n\t\t          );\n\t\t      }\n\t\t  }\n\t\t  catch(Exception $e){}\n\t\t}\n\t\treturn $response;\n\t}\n\tadd_filter('wp_prepare_attachment_for_js', 'def_common_svg_media_thumbnails', 10, 3);\n\/\/* End allow SVG",
            "tags": [
                "General"
            ],
            "active": true,
            "modified": "2024-10-20 22:52:54",
            "revision": "11"
        },
        {
            "id": 49,
            "name": "LOGIN STYLING",
            "desc": "<p>BB Login Restyling<\/p>",
            "code": "\/\/ Customize the WordPress login form\nfunction my_custom_login_styles() {\n    ?>\n    <style type=\"text\/css\">\n\n        \/* Replace WordPress logo and link to custom site *\/\n        #login h1 a {\n            background: url('\/wp-content\/uploads\/2024\/10\/bb-logo.svg') no-repeat center center;\n            width: 50px; \/* Width to match the standard WordPress logo *\/\n            height: 50px; \/* Height to match the standard WordPress logo *\/\n            background-size: contain;\n            display: block;\n            margin: 0 auto;\n        }\n\n        \/* Hide the \"Remember Me\" checkbox *\/\n        .login #loginform .forgetmenot {\n            display: none;\n        }\n\n\t\t\n.wp-core-ui .button, .wp-core-ui .button-secondary {\n    color: #000000;\n    border-color: #000000;\n}\n\n        \/* Customize the login page background *\/\n        #login {\n            background: #fff; \/* No background color for the form *\/\n            padding: 30px;\n            border-radius: 0px;\n            box-shadow: 0px;\n            margin-top: 10%;\n            max-width: 320px;\n            margin: auto;\n            position: relative;\n            z-index: 1;\n        }\n\n        \/* Customize the login form *\/\n        #login form {\n            padding: 20px;\n            border-radius: 0px;\n        }\n\n        \/* Customize the input fields *\/\n        #login input[type=text],\n        #login input[type=password] {\n            border: 1px solid #ddd;\n            border-radius: 0px;\n            padding: 10px;\n            width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 10px;\n        }\n\t\t\n\t\t        \/* Customize the login button *\/\n        #login input[type=submit] {\n            background: #000000; \n            border: none;\n            border-radius: 0px;\n            color: #ffffff;\n            width: 100%;\n            cursor: pointer;\n            transition: background-color 0.3s ease;\n        }\n\n        \/* Change button color on hover *\/\n        #login input[type=submit]:hover {\n            background: #333333;\n        }\n\n\n    <\/style>\n    <?php\n}\nadd_action('login_head', 'my_custom_login_styles');",
            "tags": [
                "branding"
            ],
            "active": true,
            "modified": "2024-10-20 22:53:02",
            "revision": "69"
        },
        {
            "id": 50,
            "name": "DISABLE AUTHOR ARCHIVES",
            "desc": "Removes the author archive section and redirects all links to author archives to the homepage. Perfect for blogs where there is only a single author.",
            "code": "add_filter( 'author_link', function ( $link ) {\n\treturn home_url( 'about' );\n});\n\nadd_action( 'template_redirect', function () {\n\tif ( is_author() ) {\n\t\twp_redirect( home_url( 'about' ) );\n\t\texit;\n\t}\n});",
            "tags": [
                "General"
            ],
            "active": true,
            "modified": "2024-10-20 22:53:10",
            "revision": "11"
        },
        {
            "id": 51,
            "name": "NEW ADMIN BAR LINK",
            "desc": "\n<p>The code adds a 'Support' link to the WordPress admin toolbar that opens in a new tab.<\/p>",
            "code": "add_action( 'admin_bar_menu', 'toolbar_link_to_mypage', 999 );\n\nfunction toolbar_link_to_mypage( $wp_admin_bar ) {\n    $args = array(\n        'id'    => 'my_page',\n        'title' => 'Support',\n        'href'  => 'http:\/\/bueroblanko.de\/support',\n        'meta'  => array( \n            'class' => 'my-toolbar-page',\n            'target' => '_blank' \/\/ Link in neuem Tab \u00f6ffnen\n        )\n    );\n    $wp_admin_bar->add_node( $args );\n}\n",
            "tags": [
                "admin-bar",
                "branding"
            ],
            "active": true,
            "modified": "2024-10-20 23:00:07",
            "revision": "5"
        },
        {
            "id": 52,
            "name": "HIDE DIVI DASHBOARD",
            "desc": "\n<p>The code removes the Divi Dashboard menu from the WordPress admin panel.<\/p>",
            "code": "\/\/ Hide Dashboard code snippet\nadd_action( 'init', function() {\n    \/\/ Restrict Page to access using direct link\n    global $pagenow;\n    $page = ! empty( $_GET['page'] ) ? $_GET['page'] : '';\n    if (!empty($page) && $page === 'et_onboarding' && !empty($pagenow) && $pagenow === 'admin.php') {\n        wp_die( esc_attr( \"You don't have permission to access this page\"));\n    }\n    \/\/ Enqueue CSS To Hide Divi Dashboard Option & Enqueue JS To Change Tab When Click Divi in Dashboard\n    add_action('admin_enqueue_scripts', function() {\n        \/\/ CSS\n        $hideDiviDashboardCSS = \"#toplevel_page_et_divi_options ul.wp-submenu li a[href='admin.php?page=et_onboarding'] {display: none!important;}\";\n        wp_register_style('pac-da-hide-divi-dashboard-option', false, [], '1.0.0');\n        wp_enqueue_style('pac-da-hide-divi-dashboard-option');\n        wp_add_inline_style('pac-da-hide-divi-dashboard-option', $hideDiviDashboardCSS);\n        \/\/ JS\n        ob_start();\n        ?> jQuery(document).ready(function(){jQuery('a.wp-has-submenu[href=\"admin.php?page=et_onboarding\"]').attr(\"href\",\"admin.php?page=et_divi_options\")}); <?php\n        $hideDiviDashboardJS = ob_get_contents();\n        ob_end_clean();\n        wp_register_script('pac-da-change-divi-dashboard-option', '', ['jquery'], '1.0.0', true);\n        wp_enqueue_script('pac-da-change-divi-dashboard-option');\n        wp_add_inline_script('pac-da-change-divi-dashboard-option', $hideDiviDashboardJS);\n    });\n});",
            "active": true,
            "modified": "2024-10-20 23:05:16",
            "revision": "5"
        }
    ]
}